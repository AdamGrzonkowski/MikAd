// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using Shop;
using Shop.Models;

namespace Shop
{
    public static partial class ImagesExtensions
    {
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Image Get(this IImages operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Image> GetAsync(this IImages operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Shop.Models.Image> result = await operations.GetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        public static IList<Image> GetAll(this IImages operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).GetAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Image>> GetAllAsync(this IImages operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Shop.Models.Image>> result = await operations.GetAllWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        /// <param name='newImage'>
        /// Required.
        /// </param>
        public static object Post(this IImages operations, ImageViewModel newImage)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IImages)s).PostAsync(newImage);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Shop.IImages.
        /// </param>
        /// <param name='newImage'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this IImages operations, ImageViewModel newImage, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostWithOperationResponseAsync(newImage, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
