// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace Shop.Models
{
    public partial class OrderViewModel
    {
        private IDictionary<string, int> _details;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IDictionary<string, int> Details
        {
            get { return this._details; }
            set { this._details = value; }
        }
        
        private string _notes;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Notes
        {
            get { return this._notes; }
            set { this._notes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OrderViewModel class.
        /// </summary>
        public OrderViewModel()
        {
            this.Details = new LazyDictionary<string, int>();
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type OrderViewModel
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Notes != null)
            {
                outputObject["Notes"] = this.Notes;
            }
            if (this.Details != null)
            {
                if (this.Details is ILazyCollection<KeyValuePair<string, int>> == false || ((ILazyCollection<KeyValuePair<string, int>>)this.Details).IsInitialized)
                {
                    JObject nullable1Dictionary = new JObject();
                    outputObject["Nullable`1"] = nullable1Dictionary;
                    foreach (KeyValuePair<string, int> pair in this.Details)
                    {
                        string nullable1Key = pair.Key;
                        int? nullable1Value = pair.Value;
                        if (nullable1Value != null)
                        {
                            nullable1Dictionary[nullable1Key] = nullable1Value.Value;
                        }
                    }
                }
            }
            return outputObject;
        }
    }
}
